---
title: "Clinical Dashboard Report"
author: "Shrumi Dedhia"
output: html_document
---

## Introduction

This report provides an overview of the **data cleaning process** applied to the **Heart Disease Dataset** which originates from the **[UCI Heart Disease Repository](https://archive.ics.uci.edu/dataset/45/heart+disease).**  
The dataset initially contained **76 attributes**, which were **preprocessed and narrowed down** to **14 key attributes** essential for heart disease analysis. 

---

### **Load Required Libraries and Data**
```{r setup, include=TRUE, message=FALSE, warning=FALSE}

# Load necessary libraries
library(dplyr)
library(tidyr)
library(ggplot2)
library(knitr)
library(DT )
```
```{r data-load, include=FALSE}
cleaned_df <- read.csv("C:/Users/shrum/Downloads/clinical_dashboard/clinical_dashboard/reports/cleaned_heart_disease_data.csv")
raw_df <- read.csv("C:/Users/shrum/Downloads/clinical_dashboard/clinical_dashboard/reports/raw_heart_disease_data.csv")

```
---

### **Displaying Dataset Summary After Applying Cleaning Function **
```{r dataset-summary, echo=FALSE, message=FALSE, warning=FALSE}
knitr::kable(data.frame(
  "Total Rows" = nrow(cleaned_df),
  "Total Columns" = ncol(cleaned_df)
))
# Preview first few rows
datatable(head(cleaned_df), options = list(pageLength = 5))
```
---

### **Visualizing Outliers**
We use **boxplots** to visualize **continuous variables** before and after cleaning.
```{r Boxplots, echo=FALSE}
# Combine Raw and Cleaned Data for Faceting
combined_df <- bind_rows(
  raw_df %>%
    select(age, trestbps, chol, thalach, oldpeak) %>%
    pivot_longer(cols = everything(), names_to = "variable", values_to = "value") %>%
    mutate(dataset = "Raw Data"),
  
  cleaned_df %>%
    select(age, trestbps, chol, thalach, oldpeak) %>%
    pivot_longer(cols = everything(), names_to = "variable", values_to = "value") %>%
    mutate(dataset = "Cleaned Data")
)

# Boxplot with Faceting
ggplot(combined_df, aes(x = variable, y = value)) +
  geom_boxplot(fill = "lightblue", alpha = 0.7, outlier.shape = NA) +  # Hide outliers
  theme_minimal() +
  labs(title = "Raw vs. Cleaned Data: Outlier Detection", 
       x = "Variable", y = "Value") +
  facet_wrap(~dataset, scales = "free")  # Facet by dataset (Raw vs. Cleaned)
```

```{r IQR-range, echo=FALSE}

# Compute IQR thresholds from raw_df
iqr_values <- raw_df %>%
  select(age, trestbps, chol, thalach, oldpeak) %>%
  summarise(across(everything(), list(
    Q1 = ~quantile(., 0.25, na.rm = TRUE),
    Q3 = ~quantile(., 0.75, na.rm = TRUE)
  ))) %>%
  pivot_longer(cols = everything(), names_to = c("variable", ".value"), names_sep = "_")

# Compute IQR and limits
iqr_values <- iqr_values %>%
  mutate(IQR = Q3 - Q1,
         lower_limit = Q1 - 1.5 * IQR,
         upper_limit = Q3 + 1.5 * IQR)


```
Before
```{r outlier-plot-raw, echo=FALSE}
# Boxplot for raw data
raw_df %>%
  select(age, trestbps, chol, thalach, oldpeak) %>%
  pivot_longer(cols = everything(), names_to = "variable", values_to = "value") %>%
  ggplot(aes(x = variable, y = value)) +
  geom_boxplot(fill = "lightblue", alpha = 0.7) +
  theme_minimal() +
  labs(title = "Outlier Detection in Raw Data", x = "Variable", y = "Value")
```

After
```{r outlier-plot-cleaned, echo=FALSE}
# Merge IQR thresholds into cleaned data
cleaned_df_long <- cleaned_df %>%
  select(age, trestbps, chol, thalach, oldpeak) %>%
  pivot_longer(cols = everything(), names_to = "variable", values_to = "value") %>%
  left_join(iqr_values, by = "variable")  # Ensure same limits are used

# Boxplot for cleaned data (without outliers using raw IQR)
ggplot(cleaned_df_long, aes(x = variable, y = value)) +
  geom_boxplot(fill = "lightblue", alpha = 0.7, outlier.shape = NA) +  # Hide outliers
  theme_minimal() +
  labs(title = "Cleaned Data: No Outliers", x = "Variable", y = "Value")

```

---

### **Heart Disease Distribution**
A **bar plot** to show how many patients have heart disease.

```{r disease-distribution, echo=FALSE}
ggplot(cleaned_df, aes(x = factor(num), fill = factor(num))) +
  geom_bar() +
  labs(title = "Heart Disease Distribution", 
       x = "Heart Disease Status (0 = No Disease, 1 = Disease Present)", 
       y = "Count") +
  theme_minimal() +
  scale_fill_manual(values = c("0" = "green", "1" = "red"))
```
---